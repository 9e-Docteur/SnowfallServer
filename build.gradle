plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
}

group = 'be.ninedocteur'
version = '0.5-Alpha'
def jarName = "YourJarName"
def modInstance = ""
def modName = "YourModName"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'com.github.9e-Docteur:ApareAPI:1.4.7'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.0-rc1'
}

jar {
    archiveBaseName = "SnowfallServer-" + version
    manifest {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        attributes 'Main-Class' : 'fr.ninedocteur.snowfall.Snowfall'
    }

    from {
        configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
    }
}

task generateRunConfigurationsForEclipse {
    doLast {
        file(".settings/org.eclipse.jdt.launching.prefs").text = """
        org.eclipse.jdt.launching.PROGRAM_ARGUMENTS=--runInDevMode
        org.eclipse.jdt.launching.MAIN_TYPE=fr.ninedocteur.snowfall.Snowfall
        """
    }
}

task generateRunConfigurationForIdea {
    doLast {
        def ideaConfigFile = file(".idea/runConfigurations/Snowfall.xml")
        ideaConfigFile.parentFile.mkdirs()
        ideaConfigFile.text = """
        <component name="ProjectRunConfigurationManager">
          <configuration default="false" name="Snowfall" type="Application" factoryName="Application">
            <option name="MAIN_CLASS_NAME" value="fr.ninedocteur.snowfall.SnowfallServer" />
            <option name="PROGRAM_PARAMETERS" value="--runInDevMode" />
            <option name="VM_PARAMETERS" value="-Xmx512m -XX:+UseG1GC -XX:+UseStringDeduplication -Dfile.encoding=UTF-8" />
            <option name="WORKING_DIRECTORY" value="file://\$PROJECT_DIR\$" />
            <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
            <option name="ALTERNATIVE_JRE_PATH" value="\$PROJECT_DIR\$\\jdk1.8" />
            <option name="ENABLE_SWING_INSPECTOR" value="false" />
            <option name="ENV_VARIABLES" />
            <option name="PASS_PARENT_ENVS" value="true" />
            <module name="snowfall" />
            <envs />
            <method />
          </configuration>
        </component>
        """
    }
}

compileJava.dependsOn generateRunConfigurationForIdea

eclipse {
    classpath {
        file {
            withXml {
                def node = it.asNode()
                def entries = node.component.find { it.@name == 'org.eclipse.jdt.launching.classpathEntry' }
                entries.appendNode('classpathentry', [kind: 'con', path: 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5', including: '/project/org.eclipse.jdt.launching.prefs'])
            }
        }
    }
}

tasks.eclipse.dependsOn generateRunConfigurationsForEclipse

task configureSystemProperties {
    doFirst {
        if (!System.properties.containsKey("ide")) {
            System.setProperty("ide", "IntelliJ IDEA")
        }
    }
}


def userDir = System.getProperty("user.home")
def jarFile
if (!modInstance.isEmpty()) {
    jarFile = file(userDir + '/ApareAPI/Mods/' + modInstance + '/' + modName + '.jar')
} else {
    jarFile = file(userDir + '/ApareAPI/Mods/common/' + modName + '.jar')
}

task apareCompile(type: Jar) {
    def destDir = jarFile.parentFile
    if (!destDir.exists()) {
        destDir.mkdirs()
    }
    from sourceSets.main.output
    archiveFileName = jarFile.name
    destinationDirectory = jarFile.parentFile
}

task apareRun(dependsOn: 'apareCompile', type: JavaExec) {
    main = 'be.ninedocteur.apare.ApareAPI'
    classpath = sourceSets.main.runtimeClasspath
}


test {
    useJUnitPlatform()
}